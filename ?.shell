
# , ilyz
#
# , prepare




touch                               './?.fst'


touch                               './?.c'

touch                               './?.cpp'

touch                               './?.sh'

touch                               './?.java'

touch                               './?.vb'

touch                               './?.py'






circuits_crystals___forgiven=`echo ''  |  tee -a  './?.fst' './?.c' './?.cpp' './?.sh' './?.java' './?.vb' './?.py'` 

circuits_crystals___forgiven=`echo ''  |  tee -a  './?.fst' './?.c' './?.cpp' './?.sh' './?.java' './?.vb' './?.py'` 




if  [  $#  -eq  3  ]

then


if  [  $1  =  'test'  ]

then




circuits_crystals___forgiven=`echo  ', circuits,'             |  tee -a  './?.fst'`

circuits_crystals___forgiven=`echo  ''                        |  tee -a  './?.fst'`

circuits_crystals___forgiven=`echo  ','                       |  tee -a  './?.fst'`

circuits_crystals___forgiven=`echo  ''                        |  tee -a  './?.fst'`

circuits_crystals___forgiven=`echo  $1                        |  tee -a  './?.fst'`

circuits_crystals___forgiven=`echo  ''                        |  tee -a  './?.fst'`

circuits_crystals___forgiven=`echo  ''                        |  tee -a  './?.fst'`


circuits_crystals___forgiven=`echo  ','                       |  tee -a  './?.fst'`

circuits_crystals___forgiven=`echo  ''                        |  tee -a  './?.fst'`

circuits_crystals___forgiven=`echo  ''                        |  tee -a  './?.fst'`


circuits_crystals___forgiven=`echo  ''                        |  tee -a  './?.fst'`

circuits_crystals___forgiven=`echo  ''                        |  tee -a  './?.fst'`


circuits_crystals___forgiven=`echo  ''                        |  tee -a  './?.fst'`

circuits_crystals___forgiven=`echo  ''                        |  tee -a  './?.fst'`


circuits_crystals___forgiven=`echo  ', circuits, test,'       |  tee -a  './?.fst'`

circuits_crystals___forgiven=`echo  ''                        |  tee -a  './?.fst'`

circuits_crystals___forgiven=`echo  ','                       |  tee -a  './?.fst'`

circuits_crystals___forgiven=`echo  ''                        |  tee -a  './?.fst'`

circuits_crystals___forgiven=`echo  $2                        |  tee -a  './?.fst'`

circuits_crystals___forgiven=`echo  ''                        |  tee -a  './?.fst'`

circuits_crystals___forgiven=`echo  ''                        |  tee -a  './?.fst'`


circuits_crystals___forgiven=`echo  ''                        |  tee -a  './?.fst'`

circuits_crystals___forgiven=`echo  ''                        |  tee -a  './?.fst'`


echo  ', circuits, star,fall,'  >>  './?.fst'

echo  ''                        >>  './?.fst'

echo  ','                       >>  './?.fst'

echo  ''                        >>  './?.fst'

echo  $3                        >>  './?.fst'

echo  ''                        >>  './?.fst'

echo  ''                        >>  './?.fst'



echo  ','                       >>  './?.fst'

echo  ''                        >>  './?.fst'

echo  ''                        >>  './?.fst'


echo  ''                        >>  './?.fst'

echo  ''                        >>  './?.fst'




circuits_crystals___forgiven=`echo  '#define that_circuits___test'      | tee -a   './?.c' './?.cpp'`


circuits_crystals___forgiven=`echo  ''                                  | tee -a   './?.c' './?.cpp'`

circuits_crystals___forgiven=`echo  '#define that_circuits_test___'$2   | tee -a   './?.c' './?.cpp'`


circuits_crystals___forgiven=`echo  ''                                  | tee -a   './?.c' './?.cpp'`

circuits_crystals___forgiven=`echo  ''                                  | tee -a   './?.c' './?.cpp'`




#fi


elif  [  $1  =  'island'  ]

then




echo  ', circuits,'             >>  './?.fst'

echo  ''                        >>  './?.fst'

echo  ','                       >>  './?.fst'

echo  ''                        >>  './?.fst'

echo  $1                        >>  './?.fst'

echo  ''                        >>  './?.fst'

echo  ''                        >>  './?.fst'


echo  ','                       >>  './?.fst'

echo  ''                        >>  './?.fst'

echo  ''                        >>  './?.fst'


echo  ''                        >>  './?.fst'

echo  ''                        >>  './?.fst'

echo  ''                        >>  './?.fst'

echo  ''                        >>  './?.fst'


echo  ', circuits, mountains,'  >>  './?.fst'

echo  ''                        >>  './?.fst'

echo  ','                       >>  './?.fst'

echo  ''                        >>  './?.fst'

echo  $2                        >>  './?.fst'

echo  ''                        >>  './?.fst'

echo  ''                        >>  './?.fst'


echo  ''                        >>  './?.fst'

echo  ''                        >>  './?.fst'


echo  ', circuits, star,fall,'  >>  './?.fst'

echo  ''                        >>  './?.fst'

echo  ','                       >>  './?.fst'

echo  ''                        >>  './?.fst'

echo  $3                        >>  './?.fst'

echo  ''                        >>  './?.fst'

echo  ''                        >>  './?.fst'



echo  ','                       >>  './?.fst'

echo  ''                        >>  './?.fst'

echo  ''                        >>  './?.fst'


echo  ''                        >>  './?.fst'

echo  ''                        >>  './?.fst'




circuits_crystals___forgiven=`echo  '#define that_circuits___island'        | tee -a  './?.c' './?.cpp'`


circuits_crystals___forgiven=`echo  ''                                      | tee -a  './?.c' './?.cpp'`

circuits_crystals___forgiven=`echo  ''                                      | tee -a  './?.c' './?.cpp'`


circuits_crystals___forgiven=`echo  '#define that_circuits_mountains___'$2  | tee -a  './?.c' './?.cpp'`

circuits_crystals___forgiven=`echo  ''                                      | tee -a  './?.c' './?.cpp'`


circuits_crystals___forgiven=`echo  '#define that_circuits_starfall___'$3   | tee -a  './?.c' './?.cpp'`

circuits_crystals___forgiven=`echo  ''                                      | tee -a  './?.c' './?.cpp'`


circuits_crystals___forgiven=`echo  ''                                      | tee -a  './?.c' './?.cpp'`

circuits_crystals___forgiven=`echo  ''                                      | tee -a  './?.c' './?.cpp'`




fi

fi

#cat ./?.fst




circuits_crystals___forgiven=`cat './abouts/prepare/c-scripts.c'            |  tee -a   './?.c'`

circuits_crystals___forgiven=`cat './abouts/prepare/c-unix.c'               |  tee -a   './?.c'`

circuits_crystals___forgiven=`cat './abouts/prepare/c-windows.c'            |  tee -a   './?.c'`


circuits_crystals___forgiven=`cat './abouts/prepare/shell-unix.sh'          |  tee -a   './?.sh'`


circuits_crystals___forgiven=`cat './abouts/prepare/c-plus-scripts.cpp'     |  tee -a   './?.c'  './?.cpp'`

circuits_crystals___forgiven=`cat './abouts/prepare/c-plus-unix.cpp'        |  tee -a   './?.c'  './?.cpp'`

circuits_crystals___forgiven=`cat './abouts/prepare/c-plus-windows.cpp'     |  tee -a   './?.c'  './?.cpp'`

circuits_crystals___forgiven=`cat './abouts/prepare/c-plus-arduino.cpp'     |  tee -a   './?.c'  './?.cpp'`


circuits_crystals___forgiven=`cat './abouts/prepare/visual-basic.vb'        |  tee -a   './?.vb'`


:<<EOF
#cat './fst/roots/mountains/prepare/java.java'               >>  './?.java'


cat './fst/roots/mountains/prepare/python3-scripts.py'      >>  './?.py'

cat './fst/roots/mountains/prepare/python3-raspberrypi.py'  >>  './?.py'






# , ilyz
#
# , package




cat './fst/roots/mountains/prepare/star-fall/poems-third-common.poems-third             >>  './?.fst'

cat './fst/roots/mountains/prepare/star-fall/poems-third-origin.poems-third'            >>  './?.fst'

cat './fst/roots/mountains/prepare/star-fall/poems-third-unix.poems-third'              >>  './?.fst'

#cat './fst/roots/mountains/prepare/star-fall/poems-third-windows.poems-third'           >>  './?.fst'


cat './fst/roots/mountains/prepare/star-fall/poems-annotation-common.poems-annotation'  >>  './?.fst'

cat './fst/roots/mountains/prepare/star-fall/poems-annotation-origin.poems-annotation'  >>  './?.fst'

cat './fst/roots/mountains/prepare/star-fall/poems-annotation-windows.poems-annotation'  >>  './?.fst'

cat './fst/roots/mountains/prepare/star-fall/poems-annotation-arduino.arduino'          >>  './?.fst'


cat './fst/roots/mountains/prepare/star-fall/shell-unix.shell'                          >>  './?.fst'

cat './fst/roots/mountains/prepare/starfall/shell-bash.shell'                          >>  './?.fst'

cat './fst/roots/mountains/prepare/starfall/shell-ash.shell'                           >>  './?.fst'

EOF


cat './fst/roots/prepare/circuits/scripts'                                  >>  './?.fst'


:<<EOF


#cat './fst/roots/mountains/prepare/circuits/arduino-nano.arduino'                     >>  './island.c'

#cat './fst/roots/mountains/prepare/circuits/arduino-micro.arduino'                    >>  './island.c'

cat './fst/roots/mountains/prepare/circuits/renesas-gadget-citrus.arduino'            >>  './island.c'


cat './fst/roots/mountains/prepare/circuits/science-technology-consulting-8g1k08a.c'  >>  './island.c'

cat './fst/roots/mountains/prepare/circuits/science-technology-consulting-15f104w.c'  >>  './island.c'


cat './fst/roots/mountains/prepare/circuits/sgs-thomson-32l011k4t6-nucleo.c'          >>  './island.c'


cat './fst/roots/mountains/prepare/circuits/linux-intel'                              >>  './island.c'

cat './fst/roots/mountains/prepare/circuits/linux-raspberrypi'                        >>  './island.c'


cat './fst/roots/mountains/prepare/circuits/windows.poems-third'                      >>  './?.fst'

cat './fst/roots/mountains/prepare/circuits/windows.visual-basic'                     >>  './?.visual-basic'

cat './fst/roots/mountains/prepare/circuits/windows-cygwin.poems-third'               >>  './?.fst'


cat './fst/roots/mountains/prepare/circuits/android.java'                             >>  './?.java'

cat './fst/roots/mountains/prepare/circuits/android-termux.poems-third'               >>  './?.fst'




cat './fst/roots/mountains/soft-serial/prepare.arduno'              >>  './island.c'


cat './fst/roots/mountains/muti-serial/prepare.arduino'             >>  './island.c'

cat './fst/roots/mountains/muti-serial/winbond-w25q/erase.arduino'  >>  './island.c'

cat './fst/roots/mountains/muti-serial/winbond-w25q/read.arduino'   >>  './island.c'

cat './fst/roots/mountains/muti-serial/winbond-w25q/write.arduino'  >>  './island.c'




cat './fst/roots/threads/prepare'                                   >>  './island.c'

cat './fst/roots/threads/begin'                                     >>  './island.c'

cat './fst/roots/threads/end'                                       >>  './island.c'
EOF

circuits_crystals___forgiven=`cat  './fst/roots/lakes/prepare'             |  tee -a  './?.fst'`
:<<EOF
#include "./roots/lakes/prepare.bases"

#include "./roots/lakes/waves/create.bases" // may stuck when it fail

#include "./roots/lakes/waves/free.bases" // may run out when it fail

#include "./roots/lakes/waves/resize.bases" // may stuck when it fail


#include "./roots/lakes/forms/waters/prepare.bases"

#include "./roots/lakes/forms/silts/prepare.bases"

#include "./roots/lakes/forms/stones/prepare.bases"


#include "./roots/lakes/waters/show.bases" // use __int8_t,  only decimal system,   maybe less than zero

#include "./roots/lakes/waters/clean.bases" // use __int8_t


#include "./roots/lakes/stones/copy.bases"

#include "./roots/lakes/stones/append.bases"

#include "./roots/lakes/stones/measure.bases"

#include "./roots/lakes/stones/compare.bases"

#include "./roots/lakes/stones/find.bases"


#include "./roots/trees/remove.computers"


#include "./roots/trees/dirents/is.linuxes" // note_structure

#include "./roots/trees/dirents/create.linuxes"


#include "./roots/trees/files/is.linuxes" // note_structure

#include "./roots/trees/files/write.computers" // note_files

#include "./roots/trees/files/read.computers" // note_files; may read even wrong


#include "./roots/parks/terminals/out-silts.bases"

#include "./roots/parks/terminals/out-stones.bases"




#include "./branches/threads/prepare.bases"

#include "./branches/threads/begin.bases"

#include "./branches/threads/end.bases"


#include "./branches/lakes/prepare.bases"

#include "./branches/lakes/begin.bases"

#include "./branches/lakes/end.bases"


#include "./branches/lakes/waves/add.bases"  // support types include waters, silts and stones

#include "./branches/lakes/waves/drop.bases"

#include "./branches/lakes/waves/fish.bases"

#include "./branches/lakes/waves/graze.bases"


#include "./branches/lakes/forms/stones/copy.bases"

#include "./branches/lakes/forms/stones/append.bases"

#include "./branches/lakes/forms/stones/compare.bases"


#include "./branches/lakes/bubbles/prepare.bases"

#include "./branches/lakes/bubbles/clean.bases"


#include "./branches/lakes/bubbles/lights/prepare.bases"

#include "./branches/lakes/bubbles/lights/clean.bases"


#include "./branches/lakes/bubbles/threads/prepare.bases"

#include "./branches/lakes/bubbles/threads/clean.bases"


#include "./branches/lakes/bubbles/moons/prepare.bases"

#include "./branches/lakes/bubbles/moons/clean.bases"


#include "./branches/trees/dirents/is.linuxes"

#include "./branches/trees/dirents/create.linuxes"
//
#include "./branches/trees/dirents/remove.linuxes"


#include "./branches/trees/files/is.linuxes"

#include "./branches/trees/files/save.linuxes"

#include "./branches/trees/files/get.linuxes"

#include "./branches/trees/files/remove.linuxes"


#include "./branches/parks/tenderness/out.bases"


#include "./branches/selfcheck/lakes/show.bases"

#include "./branches/selfcheck/lakes/judge-lights.bases"


#include "./branches/dreams/prepare.bases"

#include "./branches/dreams/clean.bases"


#include "./branches/dreams/checks/prepare.bases"

#include "./branches/dreams/checks/clean.bases"

#include "./branches/dreams/checks/begin.bases"


#include "./branches/dreams/checks/forms/blank.bases"


//#include "./branches/dreams/deamons/begin.bases"


#include "./branches/dreams/tests/prepare.bases"

#include "./branches/dreams/tests/clean.bases"

#include "./branches/dreams/tests/begin.bases"


//#include "./branches/dreams/snows/prepare.bases"

//#include "./branches/dreams/snows/clean.bases"

//#include "./branches/dreams/snows/begin.bases"

//#include "./branches/dreams/snows/deamons.bases"


#include "./branches/dreams/showings/prepare.bases"

#include "./branches/dreams/showings/clean.bases"

#include "./branches/dreams/showings/begin.bases"


//#include "./branches/dreams/spiders/prepare.bases"

//#include "./branches/dreams/spiders/clean.bases"

//#include "./branches/dreams/spiders/begin.bases"

//#include "./branches/dreams/spiders/deamons.bases"


#include "./branches/dreams/fallings/begin.bases"




#include "./stars-ship.c"




#include "./branches/dreams/seeds/begin.bases"




#include "./branches/flowers/begin.bases" // no blank check yet
EOF

circuits_crystals___forgiven=`cat  './fst/roots/flowers/scripts'              |  tee -a  './?.fst'`

circuits_crystals___forgiven=`cat  './fst/roots/flowers/scripts.poems-third'  |  tee -a  './?.c' './?.cpp'`

:<<EOF
#include "./roots/flowers/begin.standards" // int main(), return 0

#circuits_crystals___forgiven=`cat  './fst/roots/flowers/begin.arduino'        |  tee -a './?.cpp'`

EOF






# , ilyz
#
# , convert






cp  ./?.fst  ./?.convert

:<<EOF

cp  ./?.convert  ./?.c

cp  ./?.convert  ./?.cpp

cp  ./?.convert  ./?.sh

cp  ./?.convert  ./?.vb

cp  ./?.convert  ./?.java

cp  ./?.convert  ./?.py

EOF




# , ilyz
#
# , compile




cc   ./?.c  -o ./?

:<<EOF

c++  ./?.cpp  (-std=c++0x)   (-lm)   (-lpthead)   (-lasound)   (-lwiringpi)   -o ?

EOF






# , ilyz
#
# , clean




rm ./?.fst

rm ./?.convert


rm ./?.c

rm ./?.cpp

rm ./?.sh

rm ./?.vb

rm ./?.java

rm ./?.py




#rm ./?


